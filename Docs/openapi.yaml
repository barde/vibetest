openapi: 3.0.3
info:
  title: CopilotBlazor API
  version: 1.0.0
  description: |
    **CopilotBlazor API** - A modern Azure Functions-based API for weather forecasting and health monitoring.
    
    This API is built using Azure Functions v4 with .NET 9 and follows Azure API Guidelines for:
    - Consistent error handling and response formats
    - RESTful resource naming conventions  
    - Proper HTTP status code usage
    - OpenAPI 3.0 specification compliance
    - Security best practices with managed identity support
    
    > **‚ö†Ô∏è AI Generated Notice**: This API was completely generated by AI for educational purposes. 
    > The code is not production-ready and should not be used in production environments.
    
    ## Features
    - üå§Ô∏è Weather forecast data with temperature conversion
    - üíì Health check and keep-alive endpoints for monitoring
    - üîí Secure Azure Functions implementation
    - üìä Application Insights integration
    - üåç CORS support for web clients
    
  contact:
    name: AI Generated API
    url: https://github.com/barde/vibetest
  license:
    name: Educational Use Only
    url: https://github.com/barde/vibetest/blob/main/LICENSE
  termsOfService: https://github.com/barde/vibetest
  
servers:
  - url: https://{functionAppName}.azurewebsites.net/api
    description: Azure Functions Production Environment
    variables:
      functionAppName:
        default: func-cpltst-prod
        description: Azure Function App name
        
  - url: http://localhost:5251/api
    description: Local Development Environment
    
  - url: https://{staticWebAppName}.azurestaticapps.net/api
    description: Azure Static Web Apps (Proxied Functions)
    variables:
      staticWebAppName:
        default: swa-cpltst-prod
        description: Azure Static Web Apps name

paths:
  /weatherforecast:
    get:
      tags:
        - Weather
      summary: Get Weather Forecast
      description: |
        Retrieves a 5-day weather forecast with randomly generated data.
        
        Returns temperature in both Celsius and Fahrenheit along with weather summaries.
        This endpoint demonstrates Azure Functions HTTP triggers and JSON serialization.
        
        **Features:**
        - 5-day forecast data
        - Temperature conversion (¬∞C to ¬∞F)
        - Random weather conditions
        - CORS headers for web clients
        
      operationId: getWeatherForecast
      responses:
        '200':
          description: Weather forecast data retrieved successfully
          headers:
            Access-Control-Allow-Origin:
              description: CORS header allowing cross-origin requests
              schema:
                type: string
                example: "*"
            Content-Type:
              description: Response content type
              schema:
                type: string
                example: "application/json; charset=utf-8"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WeatherForecast'
              examples:
                typical_forecast:
                  summary: Typical 5-day forecast
                  value:
                    - date: "2025-06-15"
                      temperatureC: 22
                      temperatureF: 72
                      summary: "Sunny"
                    - date: "2025-06-16"
                      temperatureC: 18
                      temperatureF: 64
                      summary: "Partly Cloudy"
                    - date: "2025-06-17"
                      temperatureC: 25
                      temperatureF: 77
                      summary: "Warm"
                    - date: "2025-06-18"
                      temperatureC: 15
                      temperatureF: 59
                      summary: "Cool"
                    - date: "2025-06-19"
                      temperatureC: 28
                      temperatureF: 82
                      summary: "Hot"
                      
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
              examples:
                server_error:
                  summary: Internal server error
                  value:
                    error:
                      code: "InternalServerError"
                      message: "An unexpected error occurred while processing the request"
                      target: "weatherforecast"
                      
        '503':
          description: Service temporarily unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
              examples:
                service_unavailable:
                  summary: Service unavailable
                  value:
                    error:
                      code: "ServiceUnavailable"
                      message: "The weather service is temporarily unavailable"
                      
    options:
      tags:
        - Weather
      summary: CORS Preflight for Weather Forecast
      description: |
        Handles CORS preflight requests for the weather forecast endpoint.
        
        This endpoint is automatically called by browsers for cross-origin requests
        and returns appropriate CORS headers to allow web client access.
        
      operationId: optionsWeatherForecast
      responses:
        '200':
          description: CORS preflight response
          headers:
            Access-Control-Allow-Origin:
              description: Allowed origins for CORS
              schema:
                type: string
                example: "*"
            Access-Control-Allow-Methods:
              description: Allowed HTTP methods
              schema:
                type: string
                example: "GET, POST, PUT, DELETE, OPTIONS"
            Access-Control-Allow-Headers:
              description: Allowed request headers
              schema:
                type: string
                example: "Content-Type, Authorization"
            Access-Control-Max-Age:
              description: CORS preflight cache duration
              schema:
                type: string
                example: "86400"

  /health:
    get:
      tags:
        - Monitoring
      summary: Application Health Check
      description: |
        Performs comprehensive health checks of the application and its dependencies.
        
        This endpoint follows Azure health check patterns and returns detailed status
        information about the application's operational state.
        
        **Health Check Categories:**
        - Application startup and initialization
        - Dependencies (databases, external services)
        - Resource availability
        - Performance metrics
        
        **Status Values:**
        - `Healthy`: All components operational
        - `Degraded`: Some non-critical issues detected  
        - `Unhealthy`: Critical issues preventing normal operation
        
      operationId: getHealthCheck
      responses:
        '200':
          description: Application is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheckResponse'
              examples:
                healthy_status:
                  summary: Healthy application
                  value:
                    status: "Healthy"
                    duration: "00:00:00.1234567"
                    timestamp: "2025-06-14T10:30:00Z"
                    checks:
                      - name: "application"
                        status: "Healthy"
                        description: "Application is running normally"
                        duration: "00:00:00.0123456"
                        data:
                          version: "1.0.0"
                          environment: "production"
                          
        '503':
          description: Application is unhealthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheckResponse'
              examples:
                unhealthy_status:
                  summary: Unhealthy application
                  value:
                    status: "Unhealthy"
                    duration: "00:00:01.2345678"
                    timestamp: "2025-06-14T10:30:00Z"
                    checks:
                      - name: "database"
                        status: "Unhealthy"
                        description: "Database connection failed"
                        duration: "00:00:01.0000000"
                        data:
                          connectionString: "***"
                          lastError: "Connection timeout"

  /keepalive:
    get:
      tags:
        - Monitoring
      summary: Keep-Alive Status
      description: |
        Simple keep-alive endpoint that indicates the service is operational.
        
        This endpoint is used for:
        - External monitoring and health checks
        - Preventing Azure Functions cold starts
        - Load balancer health probes
        - Uptime monitoring services
        
        **Response Time:** < 100ms  
        **Availability:** 99.9%+ target
        
      operationId: getKeepAlive
      responses:
        '200':
          description: Service is alive and operational
          headers:
            Access-Control-Allow-Origin:
              description: CORS header for cross-origin requests
              schema:
                type: string
                example: "*"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeepAliveResponse'
              examples:
                alive_status:
                  summary: Service alive
                  value:
                    status: "alive"
                    timestamp: "2025-06-14T10:30:00Z"
                    metadata:
                      version: "1.0.0"
                      functionName: "KeepAlive"
                      instanceId: "func-instance-001"

components:
  schemas:
    WeatherForecast:
      type: object
      required:
        - date
        - temperatureC
      properties:
        date:
          type: string
          format: date
          description: "Date for the weather forecast in ISO 8601 format (YYYY-MM-DD)"
          example: "2025-06-14"
          
        temperatureC:
          type: integer
          format: int32
          minimum: -50
          maximum: 60
          description: "Temperature in degrees Celsius"
          example: 22
          
        temperatureF:
          type: integer
          format: int32
          readOnly: true
          description: "Temperature in degrees Fahrenheit (automatically calculated from Celsius)"
          example: 72
          
        summary:
          type: string
          maxLength: 50
          minLength: 3
          nullable: true
          description: "Brief description of weather conditions"
          example: "Sunny"
          enum:
            - "Freezing"
            - "Bracing" 
            - "Chilly"
            - "Cool"
            - "Mild"
            - "Warm"
            - "Balmy"
            - "Hot"
            - "Sweltering"
            - "Scorching"
            
      example:
        date: "2025-06-14"
        temperatureC: 22
        temperatureF: 72
        summary: "Sunny"

    HealthCheckResponse:
      type: object
      required:
        - status
        - duration
        - timestamp
        - checks
      properties:
        status:
          type: string
          description: "Overall health status of the application"
          enum: ["Healthy", "Degraded", "Unhealthy"]
          example: "Healthy"
          
        duration:
          type: string
          format: duration
          description: "Total duration for all health checks in TimeSpan format"
          example: "00:00:00.1234567"
          
        timestamp:
          type: string
          format: date-time
          description: "UTC timestamp when health check was performed"
          example: "2025-06-14T10:30:00Z"
          
        checks:
          type: array
          description: "Individual component health check results"
          items:
            $ref: '#/components/schemas/HealthCheckEntry'

    HealthCheckEntry:
      type: object
      required:
        - name
        - status
        - duration
      properties:
        name:
          type: string
          maxLength: 100
          minLength: 1
          description: "Component name or identifier"
          example: "database"
          
        status:
          type: string
          description: "Component health status"
          enum: ["Healthy", "Degraded", "Unhealthy"]
          example: "Healthy"
          
        description:
          type: string
          maxLength: 500
          nullable: true
          description: "Additional context about the health status"
          example: "Successfully connected to database"
          
        duration:
          type: string
          format: duration
          description: "Duration for this specific health check"
          example: "00:00:00.0234567"
          
        data:
          type: object
          additionalProperties: true
          nullable: true
          description: "Additional metadata for this health check"
          example:
            version: "1.0.0"
            connectionCount: 5

    KeepAliveResponse:
      type: object
      required:
        - status
        - timestamp
      properties:
        status:
          type: string
          description: "Service status indicator"
          enum: ["alive"]
          example: "alive"
          
        timestamp:
          type: string
          format: date-time
          description: "UTC timestamp when response was generated"
          example: "2025-06-14T10:30:00Z"
          
        metadata:
          type: object
          additionalProperties: true
          nullable: true
          description: "Optional service metadata"
          example:
            version: "1.0.0"
            functionName: "KeepAlive"

    ApiErrorResponse:
      type: object
      required:
        - error
      properties:
        error:
          $ref: '#/components/schemas/ApiError'
      description: "Standardized error response format following Azure API Guidelines"

    ApiError:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
          maxLength: 50
          minLength: 1
          description: "Service-specific error code that provides more detail than HTTP status"
          example: "ValidationFailed"
          
        message:
          type: string
          maxLength: 1000
          minLength: 1
          description: "Human-readable description of the error"
          example: "The request parameters are invalid"
          
        target:
          type: string
          maxLength: 100
          nullable: true
          description: "The target of the error"
          example: "temperatureC"
          
        details:
          type: array
          nullable: true
          description: "Additional error details"
          items:
            $ref: '#/components/schemas/ApiErrorDetail'
            
        innererror:
          $ref: '#/components/schemas/ApiInnerError'
          nullable: true

    ApiErrorDetail:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
          description: "Specific error code for this detail"
          example: "FieldRequired"
          
        message:
          type: string
          description: "Error message for this detail"
          example: "The temperatureC field is required"
          
        target:
          type: string
          nullable: true
          description: "Target of this specific error"
          example: "temperatureC"

    ApiInnerError:
      type: object
      properties:
        code:
          type: string
          nullable: true
          description: "More specific error code"
          example: "NullReferenceException"
          
        message:
          type: string
          nullable: true
          description: "Technical error message"
          example: "Object reference not set to an instance of an object"
          
        innererror:
          $ref: '#/components/schemas/ApiInnerError'
          nullable: true

  securitySchemes:
    AzureManagedIdentity:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        Azure Managed Identity authentication for service-to-service calls.
        
        When deployed to Azure, this API uses Managed Identity for secure authentication
        without requiring stored credentials or connection strings.
        
    ApiKey:
      type: apiKey
      in: header
      name: X-API-Key
      description: |
        API key authentication for external integrations (future enhancement).
        
        This authentication method may be implemented for third-party integrations
        that require API key-based access control.

  examples:
    WeatherForecastExample:
      summary: Sample weather forecast data
      value:
        - date: "2025-06-15"
          temperatureC: 22
          temperatureF: 72
          summary: "Sunny"
        - date: "2025-06-16"
          temperatureC: 18
          temperatureF: 64
          summary: "Partly Cloudy"

    HealthyResponseExample:
      summary: Healthy application status
      value:
        status: "Healthy"
        duration: "00:00:00.1234567"
        timestamp: "2025-06-14T10:30:00Z"
        checks:
          - name: "application"
            status: "Healthy"
            description: "Application is running normally"
            duration: "00:00:00.0123456"

    ErrorResponseExample:
      summary: Standard error response
      value:
        error:
          code: "ValidationFailed"
          message: "One or more validation errors occurred"
          details:
            - code: "FieldRequired"
              message: "The temperatureC field is required"
              target: "temperatureC"

  headers:
    CorrelationId:
      description: "Unique identifier for request correlation and tracing"
      schema:
        type: string
        format: uuid
        example: "12345678-1234-1234-1234-123456789012"
        
    RequestId:
      description: "Unique request identifier for debugging"
      schema:
        type: string
        example: "req_abc123def456"

tags:
  - name: Weather
    description: |
      Weather forecast operations providing temperature and condition data.
      
      These endpoints demonstrate Azure Functions HTTP triggers, JSON serialization,
      and CORS configuration for web client compatibility.
      
  - name: Monitoring
    description: |
      Health check and monitoring endpoints for operational visibility.
      
      These endpoints follow Azure monitoring patterns and support:
      - Application health assessment
      - Cold start prevention
      - External monitoring integration
      - Operational dashboards

externalDocs:
  description: "Azure API Design Guidelines"
  url: "https://github.com/microsoft/api-guidelines/blob/vNext/azure/Guidelines.md"
