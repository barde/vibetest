---
# Deploy Azure Infrastructure with Bicep
# This workflow deploys the required Azure resources for the application

name: Deploy Azure Infrastructure

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'prod'
        type: choice
        options:
          - dev
          - test
          - prod
      force_recreate:
        description: 'Force recreate resources (use Complete deployment mode)'
        required: false
        default: false
        type: boolean

permissions:
  id-token: write
  contents: read
  actions: read

env:
  WORKLOAD_NAME: cpltst
  ENVIRONMENT: ${{ github.event.inputs.environment || 'prod' }}
  LOCATION: westeurope
  AZURE_CLI_VERSION: '2.53.0'

jobs:
  validate:
    name: Validate Infrastructure
    runs-on: ubuntu-latest
    outputs:
      resource-group-name: ${{ steps.set-outputs.outputs.resource-group-name }}
      deployment-name: ${{ steps.set-outputs.outputs.deployment-name }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Azure Login via OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Validate Bicep template
        run: |
          echo "üîç Validating Bicep template..."
          az bicep build --file Infra/main.bicep
          echo "‚úÖ Bicep template is valid"

      - name: Set job outputs
        id: set-outputs
        run: |
          RG_NAME="rg-${{ env.WORKLOAD_NAME }}-${{ env.ENVIRONMENT }}"
          DEPLOYMENT_NAME="deploy-${{ github.run_number }}-$(date +%Y%m%d-%H%M%S)"

          echo "resource-group-name=$RG_NAME" >> $GITHUB_OUTPUT
          echo "deployment-name=$DEPLOYMENT_NAME" >> $GITHUB_OUTPUT
  deploy-infrastructure:
    name: Deploy Azure Infrastructure
    runs-on: ubuntu-latest
    needs: validate

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Azure Login via OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Create Resource Group
        run: |
          RG_NAME="${{ needs.validate.outputs.resource-group-name }}"

          echo "üèóÔ∏è Creating resource group: $RG_NAME"
          az group create \
            --name "$RG_NAME" \
            --location "${{ env.LOCATION }}" \
            --tags \
              Environment="${{ env.ENVIRONMENT }}" \
              Workload="${{ env.WORKLOAD_NAME }}" \
              ManagedBy="GitHub Actions" \
              Repository="${{ github.repository }}" \
              RunId="${{ github.run_id }}" \
              RunNumber="${{ github.run_number }}" \
              LastDeployed="$(date -u +%Y-%m-%dT%H:%M:%SZ)"

          echo "‚úÖ Resource group created successfully"

      - name: Deploy Bicep Template
        id: deploy
        timeout-minutes: 30
        uses: azure/arm-deploy@v2
        with:
          scope: resourcegroup
          subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          resourceGroupName: ${{ needs.validate.outputs.resource-group-name }}
          template: Infra/main.bicep
          deploymentName: ${{ needs.validate.outputs.deployment-name }}
          deploymentMode: >-
            ${{ github.event.inputs.force_recreate == 'true' && 'Complete' || 'Incremental' }}
          parameters: >-
            workloadName=${{ env.WORKLOAD_NAME }}
            environment=${{ env.ENVIRONMENT }}
          failOnStdErr: true

      - name: Verify deployment
        if: success()
        run: |
          echo "üîç Verifying deployment status..."
          az deployment group show \
            --resource-group "${{ needs.validate.outputs.resource-group-name }}" \
            --name "${{ needs.validate.outputs.deployment-name }}" \
            --query "properties.provisioningState" \
            --output tsv

          echo "‚úÖ Deployment verification complete"

      - name: Output deployment summary
        if: always()
        run: |
          echo "## üéØ Azure Infrastructure Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Resource Group | \`${{ needs.validate.outputs.resource-group-name }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Environment | \`${{ env.ENVIRONMENT }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Location | \`${{ env.LOCATION }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Deployment Name | \`${{ needs.validate.outputs.deployment-name }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Deployment Mode | \`${{ github.event.inputs.force_recreate == 'true' && 'Complete' || 'Incremental' }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Run ID | \`${{ github.run_id }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ job.status }}" == "success" ]]; then
            echo "### ‚úÖ Deployment Status: SUCCESS" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "#### üì¶ Deployed Resources:" >> $GITHUB_STEP_SUMMARY

            # Only output if the values exist
            if [[ -n "${{ steps.deploy.outputs.functionAppName }}" ]]; then
              echo "- **Function App**: \`${{ steps.deploy.outputs.functionAppName }}\`" >> $GITHUB_STEP_SUMMARY
            fi
            if [[ -n "${{ steps.deploy.outputs.storageAccountName }}" ]]; then
              echo "- **Storage Account**: \`${{ steps.deploy.outputs.storageAccountName }}\`" >> $GITHUB_STEP_SUMMARY
            fi
            if [[ -n "${{ steps.deploy.outputs.keyVaultName }}" ]]; then
              echo "- **Key Vault**: \`${{ steps.deploy.outputs.keyVaultName }}\`" >> $GITHUB_STEP_SUMMARY
            fi
            if [[ -n "${{ steps.deploy.outputs.staticWebAppName }}" ]]; then
              echo "- **Static Web App**: \`${{ steps.deploy.outputs.staticWebAppName }}\`" >> $GITHUB_STEP_SUMMARY
            fi
            if [[ -n "${{ steps.deploy.outputs.staticWebAppUrl }}" ]]; then
              echo "- **Static Web App URL**: https://${{ steps.deploy.outputs.staticWebAppUrl }}" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "### ‚ùå Deployment Status: FAILED" >> $GITHUB_STEP_SUMMARY
            echo "Please check the logs for more details." >> $GITHUB_STEP_SUMMARY
          fi

      - name: Clean up on failure
        if: failure() && github.event.inputs.environment != 'prod'
        run: |
          echo "üßπ Cleaning up failed deployment resources for non-production environment..."
          RG_NAME="${{ needs.validate.outputs.resource-group-name }}"

          # Check if resource group exists before attempting deletion
          if az group exists --name "$RG_NAME"; then
            echo "Deleting resource group: $RG_NAME"
            az group delete --name "$RG_NAME" --yes --no-wait
            echo "‚úÖ Cleanup initiated (running in background)"
          else
            echo "‚ÑπÔ∏è Resource group does not exist, no cleanup needed"
          fi
