# Build, Test, and Deploy Blazor WebAssembly Client to Azure Static Web Apps
name: Build and Deploy Blazor WebAssembly Client

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'prod'
        type: choice
        options:
          - dev
          - test
          - prod
      force_deploy:
        description: 'Force deployment even if no changes detected'
        required: false
        default: false
        type: boolean
      skip_tests:
        description: 'Skip running tests before deployment'
        required: false
        default: false
        type: boolean
  push:
    branches: [ '**' ]
    paths:
      - 'Client/**'
      - '.github/workflows/deploy-client.yml'
      - 'Client.Tests/**'
  pull_request:
    branches: [ master, main ]
    paths:
      - 'Client/**'
      - '.github/workflows/deploy-client.yml'
      - 'Client.Tests/**'

permissions:
  id-token: write
  contents: read
  actions: read

env:
  WORKLOAD_NAME: cpltst
  ENVIRONMENT: ${{ github.event.inputs.environment || 'prod' }}
  DOTNET_VERSION: '9.0.x'
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true

jobs:
  build-and-test:
    name: Build and Test Blazor Client
    runs-on: ubuntu-latest
    outputs:
      artifact-name: ${{ steps.set-outputs.outputs.artifact-name }}
      build-version: ${{ steps.set-outputs.outputs.build-version }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: |
          echo "[sync] Restoring NuGet packages for Client projects..."
          dotnet restore Client/Client.csproj --verbosity minimal
          dotnet restore Client.Tests/Client.Tests.csproj --verbosity minimal
          echo "[success] Dependencies restored successfully"

      - name: Build solution
        run: |
          echo "[build] Building Blazor Client and dependencies..."
          dotnet build Client/Client.csproj \
            --configuration Release \
            --no-restore \
            --verbosity minimal \
            -p:TreatWarningsAsErrors=true
          dotnet build Client.Tests/Client.Tests.csproj \
            --configuration Release \
            --no-restore \
            --verbosity minimal \
            -p:TreatWarningsAsErrors=true
          echo "[success] Build completed successfully"

      - name: Run tests
        if: github.event.inputs.skip_tests != 'true'
        run: |
          echo "[test] Running client tests..."
          dotnet test Client.Tests/Client.Tests.csproj \
            --configuration Release \
            --no-build \
            --verbosity normal \
            --logger trx \
            --results-directory ./test-results \
            --collect:"XPlat Code Coverage"
          echo "[success] Tests completed successfully"

      - name: Upload test results
        if: always() && github.event.inputs.skip_tests != 'true'
        uses: actions/upload-artifact@v4
        with:
          name: test-results-client-${{ github.run_number }}
          path: ./test-results
          retention-days: 30

      - name: Publish Blazor Client
        run: |
          echo "[package] Publishing Blazor Client application..."
          dotnet publish Client/Client.csproj \
            --configuration Release \
            --no-build \
            --output ./publish \
            -p:PublishProfile=FolderProfile
          echo "[success] Application published successfully"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: blazor-client-${{ github.run_number }}
          path: ./publish
          retention-days: 30

      - name: Set job outputs
        id: set-outputs
        run: |
          ARTIFACT_NAME="blazor-client-${{ github.run_number }}"
          BUILD_VERSION="${{ github.run_number }}-$(date +%Y%m%d-%H%M%S)"

          echo "artifact-name=$ARTIFACT_NAME" >> $GITHUB_OUTPUT
          echo "build-version=$BUILD_VERSION" >> $GITHUB_OUTPUT

  deploy-to-azure:
    name: Deploy to Azure Static Web Apps
    if: |
      (github.event_name == 'push' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')) ||
      (github.event_name == 'workflow_dispatch') ||
      github.event.inputs.force_deploy == 'true'
    runs-on: ubuntu-latest
    needs: build-and-test
    environment: ${{ github.event.inputs.environment || 'prod' }}
    timeout-minutes: 15

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build-and-test.outputs.artifact-name }}
          path: ./publish

      - name: Azure Login via OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Deploy to Azure Static Web Apps
        uses: Azure/static-web-apps-deploy@v1
        with:
          action: upload
          app_location: ./publish
          output_location: wwwroot
